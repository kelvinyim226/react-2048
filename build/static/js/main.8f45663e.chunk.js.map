{"version":3,"sources":["components/styles/StyledBackground.js","gameHelper.js","components/styles/StyledBoard.js","components/styles/StyledCell.js","components/Cell.js","components/Board.js","components/styles/StyledButton.js","components/StartButton.js","hooks/useBoard.js","components/Main.js","App.js","serviceWorker.js","index.js"],"names":["StyledWrapper","styled","div","require","random","num","Math","floor","createBoard","Array","from","fill","addRandomNumber","prevBoard","firstRan","secRan","added","console","log","StyledBoard","props","height","width","StyledCell","value","Cell","Board","length","map","row","cell","x","key","StyledButton","button","StartButton","callback","onClick","cloneDeep","Main","useState","gameOver","setGameOver","board","setBoard","y","newBoard","resultBoard","i","filter","val","firstBlock","secondBlock","j","push","useBoard","updateBoard","moveHorizontal","dir","moveVertical","role","tabIndex","onKeyDown","e","keyCode","move","startboard","initiateBoard","App","className","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.8f45663e.chunk.js","sourcesContent":["import styled from 'styled-components';\n\n\nexport const StyledWrapper = styled.div`\n  width: 100vw;\n  height: 100vh;\n  background-color: lightgoldenrodyellow;\n  overflow: hidden;\n  display: flex;\n\n  aside{\n    display: flex;\n    margin-bottom: auto;\n    margin-top: auto;\n    margin-right: auto;\n  }\n`;\n","export const Board_WIDTH = 4;\nexport const Board_HEIGHT = 4;\nexport const cloneDeep = require('lodash/cloneDeep');\n\nexport function random (num) {\n    return Math.floor(Math.random() * num)\n  }\nexport const createBoard = () =>\nArray.from(Array(4), () =>\n    Array(4).fill(0)\n  )\n\nexport const initiateBoard = () => {\n  const startboard = (createBoard())\n  addRandomNumber(startboard)\n  addRandomNumber(startboard)\n  return startboard\n   \n \n}\n\nexport const addRandomNumber = (prevBoard) => {\n  let firstRan = random(Board_WIDTH);\n  let secRan = random(Board_WIDTH);\n  let added = false;\n  while(!added){\n  if(prevBoard[firstRan][secRan] === 0){\n      prevBoard[firstRan][secRan] = 2\n      added = true;\n    }\n  }\n  console.log('done')\n  return prevBoard\n}\n","import styled from 'styled-components';\n\nexport const StyledBoard = styled.div`\n  display: grid;\n  grid-template-rows: repeat(\n    ${props => props.height},\n    calc(35vw / ${props => props.width})\n  );\n  grid-template-columns: repeat(${props => props.width}, 1fr);\n  grid-gap: 1px;\n  border: 4px solid rgba(108, 122, 137, 1);\n  width: 100%;\n  max-width: 35vw;\n  background: rgba(191, 191, 191, 1);\n  margin: auto;\n  margin-right: 10px;\n`;","import styled from 'styled-components';\n\nexport const StyledCell = styled.div`\n  width: auto;\n  background: ${props => (props.value === 0 ? 'rgba(232, 232, 232, 1)' : 'rgba(232, 232, 232, 1)')};\n  border: 3px solid;\n  border-color: rgba(191, 191, 191, 1);\n  display: flex;\n  justify-content: center;\n  align-items: center;\n   \n  span{\n      color: slategrey;\n      font-size: x-large;\n      font-weight: bold;\n  }\n`\n;","import React from 'react';\nimport { StyledCell } from './styles/StyledCell';\n\nconst Cell = ({ value }) => (\n<StyledCell ><span>{value == 0 ? '' : value }</span></ StyledCell>\n)\n\nexport default Cell;","import React from 'react';\nimport { StyledBoard } from './styles/StyledBoard';\n\nimport Cell from './Cell';\n\nconst Board = ({ Board }) => (\n  <StyledBoard width={Board.length} height={Board.length}>\n      {console.log(Board)}\n    {Board.map(row => row.map((cell, x) => <Cell key={x} value={cell} />))}\n  </StyledBoard>\n);\n\nexport default Board;\n","import styled from 'styled-components';\n\nexport const StyledButton = styled.button`\n  box-sizing: border-box;\n  margin: 0 0 20px 0;\n  padding: 20px;\n  min-height: 30px;\n  width: 100%;\n  border-radius: 20px;\n  border: none;\n  color: white;\n  background: #333;\n  font-size: 1rem;\n  outline: none;\n  cursor: pointer;\n`","import React from 'react';\nimport { StyledButton } from './styles/StyledButton';\n\nconst StartButton = ({ callback }) => (\n  <StyledButton onClick={callback}>Start Game</StyledButton>\n)\n\nexport default StartButton;","import { useState, useEffect } from 'react';\nimport { createBoard, Board_WIDTH ,addRandomNumber} from '../gameHelper';\nconst cloneDeep = require('lodash/cloneDeep');\nexport const useBoard = () => {\n  const [board, setBoard] = useState(createBoard());\n  \n    const updateBoard = ({ x, y }) => {\n      const newBoard = cloneDeep(board);\n      const resultBoard = [];\n\n\n      for(let i = 0 ; i < 4 ; i++){\n        let row = newBoard[i].filter(val => val != 0);\n        let firstBlock = 0;\n        let secondBlock = 1;\n\n        if(row.length > 1){\n          console.log(i)\n          console.log('row.length',row.length)\n          while(firstBlock < row.length-1){\n            console.log('time',firstBlock)\n            if(row[secondBlock]){\n              console.log('row[secondBlock]',row[secondBlock]);\n              if(row[firstBlock] === row[secondBlock]){\n                row[firstBlock] += row[secondBlock];\n                row[secondBlock] = 0\n              }\n              firstBlock++;\n              secondBlock = firstBlock + 1;\n            }else{\n              break;\n            }\n       \n          }\n          console.log('secondBlock',secondBlock)\n          console.log('row',row)\n        }\n        for(let j = row.length; j < 4; j++){\n          row.push(0)\n        }\n        resultBoard.push(row)\n        console.log('finish',i)\n      }\n      console.log(resultBoard)\n      addRandomNumber(resultBoard)\n      setBoard(resultBoard)\n    }\n\n\n    \n\n\n\n\n  return [board, setBoard, updateBoard];\n};\n","import React, {useState} from 'react';\nimport { StyledWrapper } from './styles/StyledBackground';\nimport { createBoard, initiateBoard } from '../gameHelper';\nimport Board from './Board';\nimport StartButton from './StartButton';\nimport { useBoard, updateBoard, setBoard } from '../hooks/useBoard';\n\n\nconst Main = () => {\n    const [gameOver, setGameOver] = useState(false);\n    const [board, setBoard, updateBoard] = useBoard(createBoard());\n\n    const startGame = () => {\n        console.log(\"test\")\n        // Reset everything\n        setBoard(initiateBoard());\n        setGameOver(false);\n      }\n\n    const moveHorizontal = dir => {\n        updateBoard({ x: dir, y: 0 })\n      }\n\n    const moveVertical = dir => {\n        updateBoard({ x: 0, y: dir });\n    }\n\n    const move = ({ keyCode }) => {\n    if (!gameOver) {\n        if (keyCode === 37) {\n        moveHorizontal(0);\n        } else if (keyCode === 38) {\n        moveVertical(1);\n        }else if (keyCode === 39) {\n        moveHorizontal(4);\n        } else if (keyCode === 40) {\n        moveVertical(-1);\n        }\n    }\n    }\n    console.log('rerender',board)\n\n\n    return(\n        <StyledWrapper role=\"button\" tabIndex=\"0\" onKeyDown={e => move(e)}>\n            <Board Board={board} />\n            <aside>\n          <StartButton callback={startGame} />\n        </aside>\n        </StyledWrapper>\n    )\n}\n\nexport default Main","import React from 'react';\nimport Main from './components/Main.js';\nimport './App.css';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n    <Main />\n  </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n    <App />\n  ,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}